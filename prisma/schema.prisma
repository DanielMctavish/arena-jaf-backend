// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAdm {
  id         String       @id @default(cuid())
  saldo      Float
  email      String       @unique
  nome       String
  senha      String
  avatar_url String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now()) @updatedAt
  Machines   Machines[]
  ArenaLocal ArenaLocal[]
}

model UserColab {
  id         String      @id @default(cuid())
  saldo      Float
  email      String      @unique
  nome       String
  senha      String
  avatar_url String
  local      ArenaLocal?
  Machines   Machines[]
}

model ArenaLocal {
  id                 String     @id @default(cuid())
  nome               String
  end_url_google     String
  proprietario       UserAdm    @relation(fields: [userAdmId], references: [id])
  userAdmId          String     
  proprietario_colab UserColab? @relation(fields: [userColabId], references: [id])
  userColabId        String?    @unique
  Sessions           Sessions[]
  Products           Products[]
  Machines           Machines[]
}

model Sessions {
  id              String         @id @default(cuid())
  proprietario_id String
  duration        Int
  value           Float
  user            UserClient     @relation(fields: [userClientId], references: [id])
  userClientId    String         
  status          SESSION_STATUS
  products        Products[]
  location        ArenaLocal     @relation(fields: [arenaLocalId], references: [id])
  arenaLocalId    String         
  Machine         Machines       @relation(fields: [machineId], references: [id])
  machineId       String         
  created_at      DateTime       @default(now())
}

model Products {
  id              String     @id @default(cuid())
  nome            String
  url_img         String
  disponiveis     Int
  value           Float
  local           ArenaLocal @relation(fields: [arenaLocalId], references: [id])
  Sessions        Sessions?  @relation(fields: [sessionsId], references: [id])
  sessionsId      String?
  arenaLocalId    String     
  proprietario_id String
}

model Transactions {
  id                  String           @id @default(cuid())
  payer_id            String
  benefited_id        String
  value               Float
  transaction_type    TRANSACTION_TYPE
  product_description String?
  method              METHOD_PAYMENT
  status              STATUS_PAYMENT
}

model UserClient {
  id              String     @id @default(cuid())
  email           String
  proprietario_id String
  saldo           Float
  nome            String
  cpf             String
  senha           String
  avatar_url      String
  Sessions        Sessions[]
}

model Machines {
  id                 String      @id @default(cuid())
  nano_id            String
  arenaLocalId       String      
  proprietario       UserAdm     @relation(fields: [userAdmId], references: [id])
  userAdmId          String      
  status             String
  local              ArenaLocal? @relation(fields: [arenaLocalId], references: [id])
  proprietario_colab UserColab?  @relation(fields: [userColabId], references: [id])
  userColabId        String?     
  sessoes            Sessions[]
}

enum SESSION_STATUS {
  RUNNING
  PAUSED
}

enum TRANSACTION_TYPE {
  PRODUCT
  MACHINE_CREDIT
  SPLIT
}

enum METHOD_PAYMENT {
  CREDITO
  PIX
}

enum STATUS_PAYMENT {
  APPROVED
  PENDENT
  CANCEL
}
